{
	"info": {
		"_postman_id": "afc1188e-b681-4972-b6ca-57bfb87ddf36",
		"name": "Cloud Commerce",
		"description": "- `\\*. authenticated routes / require jwt in headers`\n    \n- `_ require Bearer token / require roles`",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29975715"
	},
	"item": [
		{
			"name": "accounts",
			"item": [
				{
					"name": "role",
					"item": [
						{
							"name": "{uuid}",
							"item": [
								{
									"name": "# Retrieve a single role",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{_admintoken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{_}}/role/10d90a5e-e74e-4c9b-84ea-8418623df373",
											"host": [
												"{{_}}"
											],
											"path": [
												"role",
												"10d90a5e-e74e-4c9b-84ea-8418623df373"
											]
										}
									},
									"response": []
								},
								{
									"name": "# Delete a single role",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{_admintoken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{_}}/role/550d7646-2b0d-4d6f-88d6-15b242277d0e",
											"host": [
												"{{_}}"
											],
											"path": [
												"role",
												"550d7646-2b0d-4d6f-88d6-15b242277d0e"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "# Create a single role",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_admintoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"MANAGER\",\n    \"description\": \"Gerente de loja com permissões para gerenciar produtos, pedidos e usuários, além de acesso a relatórios e análises.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_}}/role",
									"host": [
										"{{_}}"
									],
									"path": [
										"role"
									]
								}
							},
							"response": []
						},
						{
							"name": "# Retrieve all roles",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_admintoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_}}/role",
									"host": [
										"{{_}}"
									],
									"path": [
										"role"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign resources to role",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_admintoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourcesIds\": [\n        \"b7a8be35-6166-4b2e-9a96-58fcba50a04a\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_}}/role/assign?roleId=2df84c7d-421b-4237-b128-b963ced93ccf",
									"host": [
										"{{_}}"
									],
									"path": [
										"role",
										"assign"
									],
									"query": [
										{
											"key": "roleId",
											"value": "2df84c7d-421b-4237-b128-b963ced93ccf"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "user",
					"item": [
						{
							"name": "{uuid}",
							"item": [
								{
									"name": "# Retrieve a single user by UUID",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{_admintoken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{_}}/user/321635a2-0ac4-42cd-a952-6ec3a0c54827",
											"host": [
												"{{_}}"
											],
											"path": [
												"user",
												"321635a2-0ac4-42cd-a952-6ec3a0c54827"
											]
										}
									},
									"response": []
								},
								{
									"name": "# Delete a single user by UUID",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{_admintoken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{_}}/user/321635a2-0ac4-42cd-a952-6ec3a0c54827",
											"host": [
												"{{_}}"
											],
											"path": [
												"user",
												"321635a2-0ac4-42cd-a952-6ec3a0c54827"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "{email}",
							"item": [
								{
									"name": "* Retrieve a single user by email",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{_admintoken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{_}}/user/email?email=local001@email.com",
											"host": [
												"{{_}}"
											],
											"path": [
												"user",
												"email"
											],
											"query": [
												{
													"key": "email",
													"value": "local001@email.com"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "# Retrieve all users",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_admintoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_}}/user",
									"host": [
										"{{_}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "# Create a single user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.email).to.exist.and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
											"});",
											"",
											"",
											"pm.test(\"CPF is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.cpf).to.be.a('string').and.to.have.lengthOf.at.least(1, \"CPF should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"created_at is a valid date format\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_admintoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"first_name\": \"Deyvison\",\n    \"last_name\": \"Borges\",\n    \"email\": \"local001@email.com\",\n    \"cpf\": \"12147178454\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_}}/user",
									"host": [
										"{{_}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "resource",
					"item": [
						{
							"name": "{uuid}",
							"item": [
								{
									"name": "# Retrieve a single resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Id is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"createdAt is in a valid date format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"createdAt is not in a valid date format\");",
													"});",
													"",
													"",
													"pm.test(\"Name is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{_admintoken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{_}}/resource/2fbe3df1-7c22-4c3c-a81e-ce92df96d179",
											"host": [
												"{{_}}"
											],
											"path": [
												"resource",
												"2fbe3df1-7c22-4c3c-a81e-ce92df96d179"
											]
										}
									},
									"response": []
								},
								{
									"name": "# Update a single resource",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{_admintoken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"\",\n    \"actions\": [\n        {\n            \"name\": \"READ\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{_}}/resource/2fbe3df1-7c22-4c3c-a81e-ce92df96d179",
											"host": [
												"{{_}}"
											],
											"path": [
												"resource",
												"2fbe3df1-7c22-4c3c-a81e-ce92df96d179"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "# Retrieve all resources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is an array\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array');",
											"});",
											"",
											"",
											"pm.test(\"Actions array is present and contains at least one element\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('array');",
											"  pm.expect(responseData).to.have.lengthOf.at.least(1, \"Actions array should not be empty\");",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.actions).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Actions array should not be empty\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Departments array is present and empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    pm.expect(responseData).to.have.lengthOf(1);",
											"    pm.expect(responseData[0]).to.have.property('departments').that.is.an('array').and.to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_admintoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_}}/resource",
									"host": [
										"{{_}}"
									],
									"path": [
										"resource"
									]
								}
							},
							"response": []
						},
						{
							"name": "# Create a single resource",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_admintoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Cart\",\n    \"path\": \"/cart\",\n    \"actions\": [\n        {\n            \"name\": \"CREATE\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_}}/resource",
									"host": [
										"{{_}}"
									],
									"path": [
										"resource"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "role_resource",
					"item": [
						{
							"name": "{uuid}",
							"item": [
								{
									"name": "* Retrieve all resources of a function",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{_admintoken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{_}}/role/71e9c988-81fb-4312-8cf8-b5cb9c79fef8/resources",
											"host": [
												"{{_}}"
											],
											"path": [
												"role",
												"71e9c988-81fb-4312-8cf8-b5cb9c79fef8",
												"resources"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Sign Up",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Deyvison\",\n    \"last_name\": \"Borges\",\n    \"email\": \"customer@email.com\",\n    \"password\": \"123123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{_}}/register",
							"host": [
								"{{_}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"access_token is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.access_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"expires_at is a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.expires_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"expires_at is not a valid date format\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"refresh_token is null or a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.refresh_token).to.satisfy(function (value) {",
									"    return value === null || typeof value === 'string' && value.length > 0;",
									"  }, \"refresh_token should be null or a non-empty string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@email.com\",\n    \"password\": \"123123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{_}}/authenticate",
							"host": [
								"{{_}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}